#region Copyright Notice
/* Copyright (c) 2017, Deb'jyoti Das - debjyoti@debjyoti.com
 All rights reserved.
 Redistribution and use in source and binary forms, with or without
 modification, are not permitted.Neither the name of the 
 'Deb'jyoti Das' nor the names of its contributors may be used 
 to endorse or promote products derived from this software without 
 specific prior written permission.
 THIS SOFTWARE IS PROVIDED BY Deb'jyoti Das 'AS IS' AND ANY
 EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 DISCLAIMED. IN NO EVENT SHALL Debjyoti OR Deb'jyoti OR Debojyoti Das OR Eyedia BE LIABLE FOR ANY
 DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#region Developer Information
/*
Author  - Deb'jyoti Das
Created - 3/19/2013 11:14:16 AM
Description  - 
Modified By - 
Description  - 
*/
#endregion Developer Information

#endregion Copyright Notice




//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3634
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Symplus.RuleEngine.Utilities
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="IProcessManagerService")]
    public interface IProcessManagerService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessManagerService/StartPullers", ReplyAction="http://tempuri.org/IProcessManagerService/StartPullersResponse")]
        string StartPullers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessManagerService/StopPullers", ReplyAction="http://tempuri.org/IProcessManagerService/StopPullersResponse")]
        string StopPullers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessManagerService/GetPullersStatus", ReplyAction="http://tempuri.org/IProcessManagerService/GetPullersStatusResponse")]
        string GetPullersStatus();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessManagerService/InitializeJob", ReplyAction="http://tempuri.org/IProcessManagerService/InitializeJobResponse")]
        string InitializeJob(int applicationId, string applicationName, string processingBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessManagerService/Parse", ReplyAction="http://tempuri.org/IProcessManagerService/ParseResponse")]
        string Parse(string jobId, string processingBy, string inputData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessManagerService/ParseXML", ReplyAction="http://tempuri.org/IProcessManagerService/ParseXMLResponse")]
        string ParseXML(string xmlInput, string processingBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessManagerService/GetJobResult", ReplyAction="http://tempuri.org/IProcessManagerService/GetJobResultResponse")]
        string GetJobResult(string jobId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessManagerService/GetActiveJobs", ReplyAction="http://tempuri.org/IProcessManagerService/GetActiveJobsResponse")]
        string GetActiveJobs(int applicationId);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IProcessManagerService/ClearCache", ReplyAction = "http://tempuri.org/IProcessManagerService/ClearCacheResponse")]
        string ClearCache();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface IProcessManagerServiceChannel : IProcessManagerService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class ProcessManagerServiceClient : System.ServiceModel.ClientBase<IProcessManagerService>, IProcessManagerService {
        
        public ProcessManagerServiceClient() {
        }
        
        public ProcessManagerServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ProcessManagerServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProcessManagerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProcessManagerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string StartPullers() {
            return base.Channel.StartPullers();
        }
        
        public string StopPullers() {
            return base.Channel.StopPullers();
        }
        
        public string GetPullersStatus() {
            return base.Channel.GetPullersStatus();
        }
        
        public string InitializeJob(int applicationId, string applicationName, string processingBy) {
            return base.Channel.InitializeJob(applicationId, applicationName, processingBy);
        }
        
        public string Parse(string jobId, string processingBy, string inputData) {
            return base.Channel.Parse(jobId, processingBy, inputData);
        }
        
        public string ParseXML(string xmlInput, string processingBy) {
            return base.Channel.ParseXML(xmlInput, processingBy);
        }
        
        public string GetJobResult(string jobId) {
            return base.Channel.GetJobResult(jobId);
        }
        
        public string GetActiveJobs(int applicationId) {
            return base.Channel.GetActiveJobs(applicationId);
        }
        public string ClearCache()
        {
            return base.Channel.ClearCache();
        }
    }
}





