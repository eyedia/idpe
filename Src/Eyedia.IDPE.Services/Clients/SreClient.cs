#region Copyright Notice
/* Copyright (c) 2017, Deb'jyoti Das - debjyoti@debjyoti.com
 All rights reserved.
 Redistribution and use in source and binary forms, with or without
 modification, are not permitted.Neither the name of the 
 'Deb'jyoti Das' nor the names of its contributors may be used 
 to endorse or promote products derived from this software without 
 specific prior written permission.
 THIS SOFTWARE IS PROVIDED BY Deb'jyoti Das 'AS IS' AND ANY
 EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 DISCLAIMED. IN NO EVENT SHALL Debjyoti OR Deb'jyoti OR Debojyoti Das OR Eyedia BE LIABLE FOR ANY
 DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#region Developer Information
/*
Author  - Deb'jyoti Das
Created - 3/19/2013 11:14:16 AM
Description  - 
Modified By - 
Description  - 
*/
#endregion Developer Information

#endregion Copyright Notice

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Eyedia.IDPE.Clients
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Eyedia.IDPE.Common.ISre")]
    public interface ISre
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISre/StartPullers", ReplyAction="http://tempuri.org/ISre/StartPullersResponse")]
        string StartPullers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISre/StartPullers", ReplyAction="http://tempuri.org/ISre/StartPullersResponse")]
        System.Threading.Tasks.Task<string> StartPullersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISre/StopPullers", ReplyAction="http://tempuri.org/ISre/StopPullersResponse")]
        string StopPullers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISre/StopPullers", ReplyAction="http://tempuri.org/ISre/StopPullersResponse")]
        System.Threading.Tasks.Task<string> StopPullersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISre/GetPullersStatus", ReplyAction="http://tempuri.org/ISre/GetPullersStatusResponse")]
        string GetPullersStatus();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISre/GetPullersStatus", ReplyAction="http://tempuri.org/ISre/GetPullersStatusResponse")]
        System.Threading.Tasks.Task<string> GetPullersStatusAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISre/ProcessJob", ReplyAction="http://tempuri.org/ISre/ProcessJobResponse")]
        string ProcessJob(int dataSourceId, string dataSourceName, string processingBy, string inputData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISre/ProcessJob", ReplyAction="http://tempuri.org/ISre/ProcessJobResponse")]
        System.Threading.Tasks.Task<string> ProcessJobAsync(int dataSourceId, string dataSourceName, string processingBy, string inputData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISre/ProcessObjects", ReplyAction="http://tempuri.org/ISre/ProcessObjectsResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        object ProcessObjects(int dataSourceId, string dataSourceName, string processingBy, object[] inputData, string overridenMapping);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISre/ProcessObjects", ReplyAction="http://tempuri.org/ISre/ProcessObjectsResponse")]
        System.Threading.Tasks.Task<object> ProcessObjectsAsync(int dataSourceId, string dataSourceName, string processingBy, object[] inputData, string overridenMapping);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISre/ProcessXml", ReplyAction="http://tempuri.org/ISre/ProcessXmlResponse")]
        string ProcessXml(string xmlInput, string processingBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISre/ProcessXml", ReplyAction="http://tempuri.org/ISre/ProcessXmlResponse")]
        System.Threading.Tasks.Task<string> ProcessXmlAsync(string xmlInput, string processingBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISre/GetActiveJobs", ReplyAction="http://tempuri.org/ISre/GetActiveJobsResponse")]
        string GetActiveJobs();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISre/GetActiveJobs", ReplyAction="http://tempuri.org/ISre/GetActiveJobsResponse")]
        System.Threading.Tasks.Task<string> GetActiveJobsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISre/ClearCache", ReplyAction="http://tempuri.org/ISre/ClearCacheResponse")]
        string ClearCache();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISre/ClearCache", ReplyAction="http://tempuri.org/ISre/ClearCacheResponse")]
        System.Threading.Tasks.Task<string> ClearCacheAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISre/ClearCacheDataSource", ReplyAction="http://tempuri.org/ISre/ClearCacheDataSourceResponse")]
        string ClearCacheDataSource(int dataSourceId, string dataSourceName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISre/ClearCacheDataSource", ReplyAction="http://tempuri.org/ISre/ClearCacheDataSourceResponse")]
        System.Threading.Tasks.Task<string> ClearCacheDataSourceAsync(int dataSourceId, string dataSourceName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISre/ClearCacheRule", ReplyAction="http://tempuri.org/ISre/ClearCacheRuleResponse")]
        string ClearCacheRule(int ruleId, string ruleName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISre/ClearCacheRule", ReplyAction="http://tempuri.org/ISre/ClearCacheRuleResponse")]
        System.Threading.Tasks.Task<string> ClearCacheRuleAsync(int ruleId, string ruleName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISre/RefreshGlobalEvents", ReplyAction="http://tempuri.org/ISre/RefreshGlobalEventsResponse")]
        string RefreshGlobalEvents();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISre/RefreshGlobalEvents", ReplyAction="http://tempuri.org/ISre/RefreshGlobalEventsResponse")]
        System.Threading.Tasks.Task<string> RefreshGlobalEventsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISre/ClearLog", ReplyAction="http://tempuri.org/ISre/ClearLogResponse")]
        string ClearLog();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISre/ClearLog", ReplyAction="http://tempuri.org/ISre/ClearLogResponse")]
        System.Threading.Tasks.Task<string> ClearLogAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISre/StopSqlPuller", ReplyAction="http://tempuri.org/ISre/StopSqlPullerResponse")]
        string StopSqlPuller(int dataSourceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISre/StopSqlPuller", ReplyAction="http://tempuri.org/ISre/StopSqlPullerResponse")]
        System.Threading.Tasks.Task<string> StopSqlPullerAsync(int dataSourceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISre/StartSqlPuller", ReplyAction="http://tempuri.org/ISre/StartSqlPullerResponse")]
        string StartSqlPuller(int dataSourceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISre/StartSqlPuller", ReplyAction="http://tempuri.org/ISre/StartSqlPullerResponse")]
        System.Threading.Tasks.Task<string> StartSqlPullerAsync(int dataSourceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISre/IsTemporarilyStopped", ReplyAction="http://tempuri.org/ISre/IsTemporarilyStoppedResponse")]
        string IsTemporarilyStopped(int dataSourceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISre/IsTemporarilyStopped", ReplyAction="http://tempuri.org/ISre/IsTemporarilyStoppedResponse")]
        System.Threading.Tasks.Task<string> IsTemporarilyStoppedAsync(int dataSourceId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISreChannel : Eyedia.IDPE.Clients.ISre, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SreClient : System.ServiceModel.ClientBase<Eyedia.IDPE.Clients.ISre>, Eyedia.IDPE.Clients.ISre
    {
        
        public SreClient()
        {
        }
        
        public SreClient(string endpointConfigurationName) : 
                base(endpointConfigurationName)
        {
        }
        
        public SreClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress)
        {
        }
        
        public SreClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress)
        {
        }
        
        public SreClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public string StartPullers()
        {
            return base.Channel.StartPullers();
        }
        
        public System.Threading.Tasks.Task<string> StartPullersAsync()
        {
            return base.Channel.StartPullersAsync();
        }
        
        public string StopPullers()
        {
            return base.Channel.StopPullers();
        }
        
        public System.Threading.Tasks.Task<string> StopPullersAsync()
        {
            return base.Channel.StopPullersAsync();
        }
        
        public string GetPullersStatus()
        {
            return base.Channel.GetPullersStatus();
        }
        
        public System.Threading.Tasks.Task<string> GetPullersStatusAsync()
        {
            return base.Channel.GetPullersStatusAsync();
        }
        
        public string ProcessJob(int dataSourceId, string dataSourceName, string processingBy, string inputData)
        {
            return base.Channel.ProcessJob(dataSourceId, dataSourceName, processingBy, inputData);
        }
        
        public System.Threading.Tasks.Task<string> ProcessJobAsync(int dataSourceId, string dataSourceName, string processingBy, string inputData)
        {
            return base.Channel.ProcessJobAsync(dataSourceId, dataSourceName, processingBy, inputData);
        }
        
        public object ProcessObjects(int dataSourceId, string dataSourceName, string processingBy, object[] inputData, string overridenMapping)
        {
            return base.Channel.ProcessObjects(dataSourceId, dataSourceName, processingBy, inputData, overridenMapping);
        }
        
        public System.Threading.Tasks.Task<object> ProcessObjectsAsync(int dataSourceId, string dataSourceName, string processingBy, object[] inputData, string overridenMapping)
        {
            return base.Channel.ProcessObjectsAsync(dataSourceId, dataSourceName, processingBy, inputData, overridenMapping);
        }
        
        public string ProcessXml(string xmlInput, string processingBy)
        {
            return base.Channel.ProcessXml(xmlInput, processingBy);
        }
        
        public System.Threading.Tasks.Task<string> ProcessXmlAsync(string xmlInput, string processingBy)
        {
            return base.Channel.ProcessXmlAsync(xmlInput, processingBy);
        }
        
        public string GetActiveJobs()
        {
            return base.Channel.GetActiveJobs();
        }
        
        public System.Threading.Tasks.Task<string> GetActiveJobsAsync()
        {
            return base.Channel.GetActiveJobsAsync();
        }
        
        public string ClearCache()
        {
            return base.Channel.ClearCache();
        }
        
        public System.Threading.Tasks.Task<string> ClearCacheAsync()
        {
            return base.Channel.ClearCacheAsync();
        }
        
        public string ClearCacheDataSource(int dataSourceId, string dataSourceName)
        {
            return base.Channel.ClearCacheDataSource(dataSourceId, dataSourceName);
        }
        
        public System.Threading.Tasks.Task<string> ClearCacheDataSourceAsync(int dataSourceId, string dataSourceName)
        {
            return base.Channel.ClearCacheDataSourceAsync(dataSourceId, dataSourceName);
        }
        
        public string ClearCacheRule(int ruleId, string ruleName)
        {
            return base.Channel.ClearCacheRule(ruleId, ruleName);
        }
        
        public System.Threading.Tasks.Task<string> ClearCacheRuleAsync(int ruleId, string ruleName)
        {
            return base.Channel.ClearCacheRuleAsync(ruleId, ruleName);
        }
        
        public string RefreshGlobalEvents()
        {
            return base.Channel.RefreshGlobalEvents();
        }
        
        public System.Threading.Tasks.Task<string> RefreshGlobalEventsAsync()
        {
            return base.Channel.RefreshGlobalEventsAsync();
        }
        
        public string ClearLog()
        {
            return base.Channel.ClearLog();
        }
        
        public System.Threading.Tasks.Task<string> ClearLogAsync()
        {
            return base.Channel.ClearLogAsync();
        }
        
        public string StopSqlPuller(int dataSourceId)
        {
            return base.Channel.StopSqlPuller(dataSourceId);
        }
        
        public System.Threading.Tasks.Task<string> StopSqlPullerAsync(int dataSourceId)
        {
            return base.Channel.StopSqlPullerAsync(dataSourceId);
        }
        
        public string StartSqlPuller(int dataSourceId)
        {
            return base.Channel.StartSqlPuller(dataSourceId);
        }
        
        public System.Threading.Tasks.Task<string> StartSqlPullerAsync(int dataSourceId)
        {
            return base.Channel.StartSqlPullerAsync(dataSourceId);
        }
        
        public string IsTemporarilyStopped(int dataSourceId)
        {
            return base.Channel.IsTemporarilyStopped(dataSourceId);
        }
        
        public System.Threading.Tasks.Task<string> IsTemporarilyStoppedAsync(int dataSourceId)
        {
            return base.Channel.IsTemporarilyStoppedAsync(dataSourceId);
        }
    }
}


