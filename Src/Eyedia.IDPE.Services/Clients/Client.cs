//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Eyedia.IDPE.Clients
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Eyedia.IDPE.Clients.IIdpe")]
    public interface IIdpe
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IIdpe/StartPullers", ReplyAction="http://tempuri.org/IIdpe/StartPullersResponse")]
        string StartPullers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IIdpe/StartPullers", ReplyAction="http://tempuri.org/IIdpe/StartPullersResponse")]
        System.Threading.Tasks.Task<string> StartPullersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IIdpe/StopPullers", ReplyAction="http://tempuri.org/IIdpe/StopPullersResponse")]
        string StopPullers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IIdpe/StopPullers", ReplyAction="http://tempuri.org/IIdpe/StopPullersResponse")]
        System.Threading.Tasks.Task<string> StopPullersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IIdpe/GetPullersStatus", ReplyAction="http://tempuri.org/IIdpe/GetPullersStatusResponse")]
        string GetPullersStatus();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IIdpe/GetPullersStatus", ReplyAction="http://tempuri.org/IIdpe/GetPullersStatusResponse")]
        System.Threading.Tasks.Task<string> GetPullersStatusAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IIdpe/ProcessJob", ReplyAction="http://tempuri.org/IIdpe/ProcessJobResponse")]
        string ProcessJob(int dataSourceId, string dataSourceName, string processingBy, string inputData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IIdpe/ProcessJob", ReplyAction="http://tempuri.org/IIdpe/ProcessJobResponse")]
        System.Threading.Tasks.Task<string> ProcessJobAsync(int dataSourceId, string dataSourceName, string processingBy, string inputData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IIdpe/ProcessObjects", ReplyAction="http://tempuri.org/IIdpe/ProcessObjectsResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(string[]))]
        object ProcessObjects(int dataSourceId, string dataSourceName, string processingBy, object[] inputData, string overridenMapping);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IIdpe/ProcessObjects", ReplyAction="http://tempuri.org/IIdpe/ProcessObjectsResponse")]
        System.Threading.Tasks.Task<object> ProcessObjectsAsync(int dataSourceId, string dataSourceName, string processingBy, object[] inputData, string overridenMapping);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IIdpe/ProcessXml", ReplyAction="http://tempuri.org/IIdpe/ProcessXmlResponse")]
        string ProcessXml(string xmlInput, string processingBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IIdpe/ProcessXml", ReplyAction="http://tempuri.org/IIdpe/ProcessXmlResponse")]
        System.Threading.Tasks.Task<string> ProcessXmlAsync(string xmlInput, string processingBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IIdpe/GetActiveJobs", ReplyAction="http://tempuri.org/IIdpe/GetActiveJobsResponse")]
        string GetActiveJobs();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IIdpe/GetActiveJobs", ReplyAction="http://tempuri.org/IIdpe/GetActiveJobsResponse")]
        System.Threading.Tasks.Task<string> GetActiveJobsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IIdpe/GetCacheKeys", ReplyAction="http://tempuri.org/IIdpe/GetCacheKeysResponse")]
        string[] GetCacheKeys();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IIdpe/GetCacheKeys", ReplyAction="http://tempuri.org/IIdpe/GetCacheKeysResponse")]
        System.Threading.Tasks.Task<string[]> GetCacheKeysAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IIdpe/ClearCache", ReplyAction="http://tempuri.org/IIdpe/ClearCacheResponse")]
        string ClearCache();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IIdpe/ClearCache", ReplyAction="http://tempuri.org/IIdpe/ClearCacheResponse")]
        System.Threading.Tasks.Task<string> ClearCacheAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IIdpe/ClearCacheDataSource", ReplyAction="http://tempuri.org/IIdpe/ClearCacheDataSourceResponse")]
        string ClearCacheDataSource(int dataSourceId, string dataSourceName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IIdpe/ClearCacheDataSource", ReplyAction="http://tempuri.org/IIdpe/ClearCacheDataSourceResponse")]
        System.Threading.Tasks.Task<string> ClearCacheDataSourceAsync(int dataSourceId, string dataSourceName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IIdpe/ClearCacheRule", ReplyAction="http://tempuri.org/IIdpe/ClearCacheRuleResponse")]
        string ClearCacheRule(int ruleId, string ruleName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IIdpe/ClearCacheRule", ReplyAction="http://tempuri.org/IIdpe/ClearCacheRuleResponse")]
        System.Threading.Tasks.Task<string> ClearCacheRuleAsync(int ruleId, string ruleName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IIdpe/RefreshGlobalEvents", ReplyAction="http://tempuri.org/IIdpe/RefreshGlobalEventsResponse")]
        string RefreshGlobalEvents();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IIdpe/RefreshGlobalEvents", ReplyAction="http://tempuri.org/IIdpe/RefreshGlobalEventsResponse")]
        System.Threading.Tasks.Task<string> RefreshGlobalEventsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IIdpe/ClearLog", ReplyAction="http://tempuri.org/IIdpe/ClearLogResponse")]
        string ClearLog();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IIdpe/ClearLog", ReplyAction="http://tempuri.org/IIdpe/ClearLogResponse")]
        System.Threading.Tasks.Task<string> ClearLogAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IIdpe/StopSqlPuller", ReplyAction="http://tempuri.org/IIdpe/StopSqlPullerResponse")]
        string StopSqlPuller(int dataSourceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IIdpe/StopSqlPuller", ReplyAction="http://tempuri.org/IIdpe/StopSqlPullerResponse")]
        System.Threading.Tasks.Task<string> StopSqlPullerAsync(int dataSourceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IIdpe/StartSqlPuller", ReplyAction="http://tempuri.org/IIdpe/StartSqlPullerResponse")]
        string StartSqlPuller(int dataSourceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IIdpe/StartSqlPuller", ReplyAction="http://tempuri.org/IIdpe/StartSqlPullerResponse")]
        System.Threading.Tasks.Task<string> StartSqlPullerAsync(int dataSourceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IIdpe/IsTemporarilyStopped", ReplyAction="http://tempuri.org/IIdpe/IsTemporarilyStoppedResponse")]
        string IsTemporarilyStopped(int dataSourceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IIdpe/IsTemporarilyStopped", ReplyAction="http://tempuri.org/IIdpe/IsTemporarilyStoppedResponse")]
        System.Threading.Tasks.Task<string> IsTemporarilyStoppedAsync(int dataSourceId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IIdpeChannel : Eyedia.IDPE.Clients.IIdpe, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IdpeClient : System.ServiceModel.ClientBase<Eyedia.IDPE.Clients.IIdpe>, Eyedia.IDPE.Clients.IIdpe
    {
        
        public IdpeClient()
        {
        }
        
        public IdpeClient(string endpointConfigurationName) : 
                base(endpointConfigurationName)
        {
        }
        
        public IdpeClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress)
        {
        }
        
        public IdpeClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress)
        {
        }
        
        public IdpeClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public string StartPullers()
        {
            return base.Channel.StartPullers();
        }
        
        public System.Threading.Tasks.Task<string> StartPullersAsync()
        {
            return base.Channel.StartPullersAsync();
        }
        
        public string StopPullers()
        {
            return base.Channel.StopPullers();
        }
        
        public System.Threading.Tasks.Task<string> StopPullersAsync()
        {
            return base.Channel.StopPullersAsync();
        }
        
        public string GetPullersStatus()
        {
            return base.Channel.GetPullersStatus();
        }
        
        public System.Threading.Tasks.Task<string> GetPullersStatusAsync()
        {
            return base.Channel.GetPullersStatusAsync();
        }
        
        public string ProcessJob(int dataSourceId, string dataSourceName, string processingBy, string inputData)
        {
            return base.Channel.ProcessJob(dataSourceId, dataSourceName, processingBy, inputData);
        }
        
        public System.Threading.Tasks.Task<string> ProcessJobAsync(int dataSourceId, string dataSourceName, string processingBy, string inputData)
        {
            return base.Channel.ProcessJobAsync(dataSourceId, dataSourceName, processingBy, inputData);
        }
        
        public object ProcessObjects(int dataSourceId, string dataSourceName, string processingBy, object[] inputData, string overridenMapping)
        {
            return base.Channel.ProcessObjects(dataSourceId, dataSourceName, processingBy, inputData, overridenMapping);
        }
        
        public System.Threading.Tasks.Task<object> ProcessObjectsAsync(int dataSourceId, string dataSourceName, string processingBy, object[] inputData, string overridenMapping)
        {
            return base.Channel.ProcessObjectsAsync(dataSourceId, dataSourceName, processingBy, inputData, overridenMapping);
        }
        
        public string ProcessXml(string xmlInput, string processingBy)
        {
            return base.Channel.ProcessXml(xmlInput, processingBy);
        }
        
        public System.Threading.Tasks.Task<string> ProcessXmlAsync(string xmlInput, string processingBy)
        {
            return base.Channel.ProcessXmlAsync(xmlInput, processingBy);
        }
        
        public string GetActiveJobs()
        {
            return base.Channel.GetActiveJobs();
        }
        
        public System.Threading.Tasks.Task<string> GetActiveJobsAsync()
        {
            return base.Channel.GetActiveJobsAsync();
        }
        
        public string[] GetCacheKeys()
        {
            return base.Channel.GetCacheKeys();
        }
        
        public System.Threading.Tasks.Task<string[]> GetCacheKeysAsync()
        {
            return base.Channel.GetCacheKeysAsync();
        }
        
        public string ClearCache()
        {
            return base.Channel.ClearCache();
        }
        
        public System.Threading.Tasks.Task<string> ClearCacheAsync()
        {
            return base.Channel.ClearCacheAsync();
        }
        
        public string ClearCacheDataSource(int dataSourceId, string dataSourceName)
        {
            return base.Channel.ClearCacheDataSource(dataSourceId, dataSourceName);
        }
        
        public System.Threading.Tasks.Task<string> ClearCacheDataSourceAsync(int dataSourceId, string dataSourceName)
        {
            return base.Channel.ClearCacheDataSourceAsync(dataSourceId, dataSourceName);
        }
        
        public string ClearCacheRule(int ruleId, string ruleName)
        {
            return base.Channel.ClearCacheRule(ruleId, ruleName);
        }
        
        public System.Threading.Tasks.Task<string> ClearCacheRuleAsync(int ruleId, string ruleName)
        {
            return base.Channel.ClearCacheRuleAsync(ruleId, ruleName);
        }
        
        public string RefreshGlobalEvents()
        {
            return base.Channel.RefreshGlobalEvents();
        }
        
        public System.Threading.Tasks.Task<string> RefreshGlobalEventsAsync()
        {
            return base.Channel.RefreshGlobalEventsAsync();
        }
        
        public string ClearLog()
        {
            return base.Channel.ClearLog();
        }
        
        public System.Threading.Tasks.Task<string> ClearLogAsync()
        {
            return base.Channel.ClearLogAsync();
        }
        
        public string StopSqlPuller(int dataSourceId)
        {
            return base.Channel.StopSqlPuller(dataSourceId);
        }
        
        public System.Threading.Tasks.Task<string> StopSqlPullerAsync(int dataSourceId)
        {
            return base.Channel.StopSqlPullerAsync(dataSourceId);
        }
        
        public string StartSqlPuller(int dataSourceId)
        {
            return base.Channel.StartSqlPuller(dataSourceId);
        }
        
        public System.Threading.Tasks.Task<string> StartSqlPullerAsync(int dataSourceId)
        {
            return base.Channel.StartSqlPullerAsync(dataSourceId);
        }
        
        public string IsTemporarilyStopped(int dataSourceId)
        {
            return base.Channel.IsTemporarilyStopped(dataSourceId);
        }
        
        public System.Threading.Tasks.Task<string> IsTemporarilyStoppedAsync(int dataSourceId)
        {
            return base.Channel.IsTemporarilyStoppedAsync(dataSourceId);
        }
    }
}
