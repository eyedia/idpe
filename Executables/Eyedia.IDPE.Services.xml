<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Eyedia.IDPE.Services</name>
    </assembly>
    <members>
        <member name="M:Eyedia.IDPE.Services.BusinessRule.#ctor(System.String,System.Int32,Eyedia.IDPE.Common.RuleSetTypes)">
            <summary>
            Business rule will be initialied with xaml, priority and type
            </summary>
            <param name="ruleSetAsXaml"></param>
            <param name="priority"></param>
            <param name="ruleSetType"></param>
        </member>
        <member name="M:Eyedia.IDPE.Services.BusinessRule.#ctor">
            <summary>
            Business rule default constructor not in use
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.BusinessRule.Priority">
            <summary>
            Priority of the rule
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.BusinessRule.Activity">
            <summary>
            The workflow activity will be initialized through constructor xaml
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.BusinessRule.RuleSetType">
            <summary>
            Rule set type
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.BusinessRule.ExceptionOccurred">
            <summary>
            true when any exception occurred while executing the rule
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.BusinessRules.ExceptionOccurred">
            <summary>
            true when any exception occurred while executing the rules
            </summary>
        </member>
        <member name="M:Eyedia.IDPE.Services.BusinessRules.Execute(Eyedia.IDPE.Services.Job,Eyedia.IDPE.Services.WorkerData,Eyedia.IDPE.Common.RuleSetTypes)">
            <summary>
            Executes business rules based on ruleSetType. Executes all business rules if ruleSetType is not passed
            </summary>
            <param name="job">The job in context</param>
            <param name="data">The worker data in context</param>
            <param name="ruleSetType">The ruleSetType (Executes all business rules if ruleSetType is not passed)</param>
        </member>
        <member name="T:Eyedia.IDPE.Services.Column">
            <summary>
            Column is a list of attributes, the main purpose is to provide a property indexer like row[0]["attributename"]
            </summary>
        </member>
        <member name="T:Eyedia.IDPE.Services.Job">
            <summary>
            Job stores information of new job. Every job has a unique identifier. 
            A job instance used by WorkerManager
            WorkerManager assignes job slices to multiple Workers
            </summary>
        </member>
        <member name="M:Eyedia.IDPE.Services.Job.Aggregate(System.String,System.Boolean,Eyedia.IDPE.Common.AggregateOperationTypes,System.String)">
            <summary>
            Thread safe agreegate function, should be called from Pre/Post validate only. The result will be stored in container data
            </summary>
            <param name="columnName">Name of the column which is to be agreegated</param>                
            <param name="isSytemColumn">True if the system columns to be searched</param>
            <param name="operationType">Aggregate operation type; default is 'Sum'</param>
            <param name="containerDataKeyName">Name of the container data key where the result will be added or updated</param>
            <returns>calculated value as double</returns>
        </member>
        <member name="M:Eyedia.IDPE.Services.Job.PreValidateGroupByMaxCount(System.String)">
            <summary>
            Thread safe group by function, should be called from Pre-validate only. Returns max(count()) group by column names
            </summary>        
            <param name="commaSeparatedColumnNames">Comma separated column names</param>        
            <returns>count</returns>
        </member>
        <member name="M:Eyedia.IDPE.Services.Job.PostValidateGroupByMaxCount(System.String,System.Boolean)">
            <summary>
            Thread safe group by function, should be called from Pre-validate only. Returns max(count()) group by column names
            </summary>        
            <param name="commaSeparatedColumnNames">Comma separated column names</param>
            <param name="isSytemColumn">True if the system columns to be searched</param>        
            <returns>count</returns>
        </member>
        <member name="M:Eyedia.IDPE.Services.Job.ColumnToString(System.String,System.Boolean,System.Boolean)">
            <summary>
            Converts all values column to 
            </summary>
            <param name="columnName"></param>
            <param name="useDoubleQuote"></param>
            <param name="isSystemColumn"></param>
            <returns></returns>
        </member>
        <member name="M:Eyedia.IDPE.Services.Job.#ctor(System.Int32,System.String,System.String,System.String)">
            <summary>
            Instantiate new job with a data source(id OR name to be passed)
            </summary>
            <param name="dataSourceId">The data source id (id OR name is required)</param>
            <param name="dataSourceName">The data source name (id OR name is required)</param>
            <param name="processingBy">Processing by user name</param>
            <param name="fileName">The file name</param>
        </member>
        <member name="P:Eyedia.IDPE.Services.Job.JobSlices">
            <summary>
            Returns read only collection of job slices
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.Job.NumberOfSlicesProcessing">
            <summary>
            Returns number of job slices getting processed (Active workers)
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.Job.NumberOfSlicesProcessed">
            <summary>
            Returns number of job slices completed
            </summary>
        </member>
        <member name="M:Eyedia.IDPE.Services.Job.Feed(System.Data.DataTable)">
            <summary>
            Feeds data into the job from an xml or CSV or FL or file name (in case of Excel or custom feeder)
            </summary>
            <param name="inputData">The parsed data table</param>
            <returns></returns>
        </member>
        <member name="M:Eyedia.IDPE.Services.Job.Feed(System.Collections.Generic.List{System.Object},System.String)">
             <summary>
             Feeds data into the job from a list objects
             </summary>
             <param name="inputData">List of objects</param>
            <param name="overridenMapping">Comma separated additional mapping override information. For example if "EmpId" from object to be mapped with "EmployeeId" of attribute, then "EmpId=EmployeeId,Ename=EmployeeName"</param>
             <returns></returns>
        </member>
        <member name="M:Eyedia.IDPE.Services.Job.GetOutput(System.String,System.String,System.Exception)">
            <summary>
            generates output from its data source and returns string
            </summary>
            <param name="errors">In case of any error</param>
            <param name="warnings">In case of any warning</param>
            <param name="execption">In case of any execption and is available</param>
            <returns>output as StringBuilder</returns>
        </member>
        <member name="M:Eyedia.IDPE.Services.Job.GetCustomOutput(System.String,System.String,System.Exception)">
            <summary>
            generates output from its data source and returns string
            </summary>
            <param name="errors">In case of any error</param>
            <param name="warnings">In case of any warning</param>
            <param name="execption">In case of any execption and is available</param>
            <returns>output as object</returns>
        </member>
        <member name="M:Eyedia.IDPE.Services.Job.AddContainerError(System.Int32,System.String)">
            <summary>
            Adds container error (generally to be called from ContainerValidator.Validate()) to a specific record
            </summary>
            <param name="position">Record position, starts from 0(zero)</param>
            <param name="errorMessage">The business error message</param>
        </member>
        <member name="P:Eyedia.IDPE.Services.Job.ColumnCount">
            <summary>
            CSV Format: InputData.Columns.Count will always return number of columns in schema, even if we actually receive less columns
            ColumnCount always returns the original column count from the file
            FixedLength: Return max row width
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.Job.JobIdentifier">
            <summary>
            Unique ideentifier of current job
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.Job.ProcessingBy">
            <summary>
            User name, who has initialized the job, (who can request for job result)
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.Job.DataSource">
            <summary>
            The data source for which job was created
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.Job.PreValidationRuleFailed">
            <summary>
            If pre-validation rule failed, it will be true
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.Job.IsValid">
            <summary>
            Returns true if data source is valid (which means a valid data found for a valid data source)
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.Job.IsErrored">
            <summary>
            If job processing was failed, this will return true
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.Job.ErroredByPusher">
            <summary>
            If job was forcefully failed from pusher
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.Job.IsAborted">
            <summary>
            If job was aborted, this will return true
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.Job.AbortRequested">
            <summary>
            Set this to true if you want to stop workflow while job is being processed. If job is already aborted/finished this will not have any effect
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.Job.IsWCFRequest">
            <summary>
            Pullers set it to true in case the job actually getting processed from WCF
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.Job.IsTriggeredBySqlPuller">
            <summary>
            If the job was triggered by Sql puller
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.Job.BadDataInCsvFormat">
            <summary>
            Returns bad data in csv file format
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.Job.IsFinished">
            <summary>
            This will return true if job is processed
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.Job.TotalRowsToBeProcessed">
            <summary>
            Total number of rows to be processed
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.Job.TotalRowsProcessed">
            <summary>
            Total rows processed (till now)
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.Job.TotalValid">
            <summary>
            Returns valid rows
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.Job.FileName">
            <summary>
            Input file name if input fed from a file
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.Job.FileNameOnly">
            <summary>
            Input file name only (without path) if input fed from a file
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.Job.FileContent">
            <summary>
            File content when required
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.Job.FileExtension">
            <summary>
            Input file extension if input fed from a file
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.Job.ProcessVariables">
            <summary>
            Common dictionary to store any object during the process
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.Job.DataFedFrom">
            <summary>
            In case data Fed from list of custom objects, this will contain the original object
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.JobSlice.CSVRows">
            <summary>
            Returns list of csv rows(lines
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.Row.IsValidForced">
            <summary>
            This can be called only from RowValidate rules
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.Row.TraceLog">
            <summary>
            Trace log for each row
            </summary>
        </member>
        <member name="M:Eyedia.IDPE.Services.Row.AddError(System.String,System.String,System.Boolean)">
            <summary>
            Adds error message to a specific column
            </summary>
            <param name="errorMessage">The error message</param>
            <param name="columnName">Name of the attribute</param>
            <param name="isSystemRow">If passed, error will be formatted as Row[n] or RowSystem[n]</param>
        </member>
        <member name="M:Eyedia.IDPE.Services.Row.ToString">
            <summary>
            Returns comma separated values
            </summary>
            <returns></returns>
        </member>
        <member name="T:Eyedia.IDPE.Services.DataSource">
            <summary>
            Run time data source for the job
            </summary>
        </member>
        <member name="M:Eyedia.IDPE.Services.DataSource.#ctor(System.Int32,System.String)">
            <summary>
            Data source object, generally intialized by a Job
            </summary>
            <param name="id"></param>
            <param name="name"></param>
        </member>
        <member name="P:Eyedia.IDPE.Services.DataSource.Attributes">
            <summary>
            Returns list of attributes
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.DataSource.AcceptableAttributes">
            <summary>
            Returns only acceptable list of attributes
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.DataSource.AcceptableAttributesSystem">
            <summary>
            Returns only acceptable list of system attributes
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.DataSource.LocalFileSystemFoldersOverriden">
            <summary>
            Returns true if local file system pull directory is overriden (does not use Global pull)
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.DataSource.LocalFileSystemFolderArchiveAuto">
            <summary>
            Returns true if IDPE to use default archive location (parallel to 'Pull')
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.DataSource.LocalFileSystemFolderPullFolder">
            <summary>
            Returns pull folder path
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.DataSource.LocalFileSystemFolderArchiveFolder">
            <summary>
            Returns archive folder path
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.DataSource.LocalFileSystemFolderOutputFolder">
            <summary>
            Returns output folder path
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.DataSource.AttributesSystem">
            <summary>
            Returns system attributes (inherited from parent data source)
            </summary>
        </member>
        <member name="M:Eyedia.IDPE.Services.DataSource.Key(Eyedia.IDPE.Common.IdpeKeyTypes)">
            <summary>
            returns specific key
            </summary>
            <param name="idpeKeyType">specific key</param>
            <returns></returns>
        </member>
        <member name="M:Eyedia.IDPE.Services.DataSource.KeyCustoms">
            <summary>
            returns all custom keys
            </summary>
            <returns></returns>
        </member>
        <member name="M:Eyedia.IDPE.Services.DataSource.KeyConnectionStrings">
            <summary>
            returns all connection strings
            </summary>
            <returns></returns>
        </member>
        <member name="M:Eyedia.IDPE.Services.DataSource.AddOtherAttachments(System.String)">
            <summary>
            Adds additional attachments to the email when a file is processed.
            Basically adds a new comma separated value to the derrived key EmailAfterFileProcessedAttachOtherFiles
            </summary>
            <param name="fileName">The attachment name</param>
        </member>
        <member name="M:Eyedia.IDPE.Services.DataSource.ClearAdditionalAttachments">
            <summary>
            Clears additional attachments, this will be executed everytime a new job is created
            </summary>
        </member>
        <member name="M:Eyedia.IDPE.Services.DataSource.GetPullFolder(System.Int32,System.Collections.Generic.List{Eyedia.IDPE.DataManager.IdpeKey})">
            <summary>
            Returns pull folder path (when datasource object is not available)
            </summary>
        </member>
        <member name="M:Eyedia.IDPE.Services.DataSource.GetOutputFolder(System.Int32,System.Collections.Generic.List{Eyedia.IDPE.DataManager.IdpeKey})">
            <summary>
            Returns output folder path (when datasource object is not available)
            </summary>
        </member>
        <member name="M:Eyedia.IDPE.Services.DataSource.GetOutputFileName(System.Int32,System.Collections.Generic.List{Eyedia.IDPE.DataManager.IdpeKey},System.String,System.String)">
            <summary>
            Returns output file name based on data source configuration 
            </summary>
        </member>
        <member name="M:Eyedia.IDPE.Services.DataSource.GetArchiveFolder(System.Int32,System.Collections.Generic.List{Eyedia.IDPE.DataManager.IdpeKey})">
            <summary>
            Returns archive folder path (when datasource object is not available)
            </summary>
        </member>
        <member name="M:Eyedia.IDPE.Services.DataSource.IsLocalFileSystemFolderArchiveAuto(System.Collections.Generic.List{Eyedia.IDPE.DataManager.IdpeKey})">
            <summary>
            Returns true if IDPE to use default archive location (parallel to 'Pull')
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.Attribute.OriginalValue">
            <summary>
            Keeps original value
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.Attribute.HasBusinessError">
            <summary>
            If an explicit error has been set using business rules
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.SreTraceLogWriter.Position">
            <summary>
            Returns position if set through constructor. This is only for display purpose
            </summary>
        </member>
        <member name="M:Eyedia.IDPE.Services.EnvironmentServiceDispatcherUsingFileSystem.DeployDataSource(Eyedia.IDPE.Services.SreEnvironmentConfig,System.Int32)">
            <summary>
            Deploys data source into specific targetConfigironment
            </summary>
            <param name="toEnvironment">Target environment</param>
            <param name="datasourceId">Data source id</param>       
        </member>
        <member name="M:Eyedia.IDPE.Services.EnvironmentServiceDispatcherUsingFileSystem.DeployRule(Eyedia.IDPE.Services.SreEnvironmentConfig,Eyedia.IDPE.DataManager.IdpeRule)">
            <summary>
            Deploys data source into specific targetConfigironment
            </summary>
            <param name="toConfig">Target environment</param>
            <param name="rule">The rule object</param>
        </member>
        <member name="M:Eyedia.IDPE.Services.EnvironmentServiceDispatcherUsingFileSystem.DeployKeys(Eyedia.IDPE.Services.SreEnvironmentConfig,System.Collections.Generic.List{Eyedia.IDPE.DataManager.IdpeKey})">
            <summary>
            Deploys data source into specific targetConfigironment
            </summary>
            <param name="toConfig">Target environment</param>       
        </member>
        <member name="M:Eyedia.IDPE.Services.EnvironmentServiceDispatcherUsingFileSystem.DeploySdf(Eyedia.IDPE.Services.SreEnvironmentConfig)">
            <summary>
            Deploys data source into specific environment
            </summary>
            <param name="targetConfig">Target environment</param>       
        </member>
        <member name="M:Eyedia.IDPE.Services.EnvironmentServiceDispatcherUsingFileSystem.RestartService(Eyedia.IDPE.Services.SreEnvironmentConfig)">
            <summary>
            Restarts service
            </summary>
            <param name="targetConfig">Target environment</param>        
        </member>
        <member name="M:Eyedia.IDPE.Services.EnvironmentServiceDispatcherUsingFileSystem.StopSqlPuller(Eyedia.IDPE.Services.SreEnvironmentConfig,System.Int32)">
            <summary>
            Restarts service
            </summary>
            <param name="targetConfig">Target environment</param>      
            <param name="dataSourceId">Data source id</param>
        </member>
        <member name="M:Eyedia.IDPE.Services.EnvironmentServiceDispatcherUsingFileSystem.StartSqlPuller(Eyedia.IDPE.Services.SreEnvironmentConfig,System.Int32)">
            <summary>
            Restarts service
            </summary>
            <param name="targetConfig">Target environment</param>      
            <param name="dataSourceId">Data source id</param>
        </member>
        <member name="M:Eyedia.IDPE.Services.EnvironmentServiceDispatcherUsingFileSystem.ExecuteCommand(Eyedia.IDPE.Services.SreEnvironmentConfig,System.String)">
            <summary>
            Executes command or batch file
            </summary>
            <param name="targetConfig">Target environment</param>      
            <param name="commandFileName">Command file name relative to target service path</param>
        </member>
        <member name="M:Eyedia.IDPE.Services.EnvironmentServiceDispatcherUsingFileSystem.ProcessFile(Eyedia.IDPE.Services.SreEnvironmentConfig,System.Int32,System.String)">
            <summary>
            Deploys data source into specific environment
            </summary>
            <param name="targetConfig">Target environment</param>       
        </member>
        <member name="M:Eyedia.IDPE.Services.IdpeEnvironmentService.SaveFileStream(System.String,System.IO.Stream)">
            <summary>
            Write the Stream in the hard drive
            </summary>
            <param name="filePath">path to write the file in</param>
            <param name="stream">stream to write</param>
        </member>
        <member name="M:Eyedia.IDPE.Services.GlobalEvents.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Gloval event handler to watch data source complete events
            </summary>
            <param name="name">Name of the global event</param>
            <param name="dosCommands">DOS commands to be executed on completion</param>
            <param name="timerIntervalMinutes">The timer interval in minutes</param>        
        </member>
        <member name="M:Eyedia.IDPE.Services.GlobalEvents.#ctor(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gloval event handler to watch data source complete events
            </summary>
            <param name="name">Name of the global event</param>
            <param name="dosCommands">DOS commands to be executed on completion</param>
            <param name="timerIntervalMinutes">The timer interval in minutes</param>
            <param name="timeOut">Timeout in minutes, if not passed, default 5 minutes will be set</param>        
        </member>
        <member name="T:Eyedia.IDPE.Services.CommandParser">
            <summary>
            Parses command
            </summary>
        </member>
        <member name="T:Eyedia.IDPE.Services.CSharpCodeToDataTable">
            <summary>
            Executes defined CSharp code to generate dattaable for the datasource
            </summary>
        </member>
        <member name="M:Eyedia.IDPE.Services.CSharpCodeToDataTable.#ctor(Eyedia.IDPE.Services.Job)">
            <summary>
            Instantiate CSharpCodeToDataTable with job
            </summary>
            <param name="job">The job object</param>        
        </member>
        <member name="M:Eyedia.IDPE.Services.CSharpCodeToDataTable.#ctor(Eyedia.IDPE.Services.DataSource)">
            <summary>
            Instantiate CSharpCodeToDataTable with job
            </summary>
            <param name="dataSource">The DataSource object</param>        
        </member>
        <member name="M:Eyedia.IDPE.Services.CSharpCodeToDataTable.Parse(System.Text.StringBuilder,System.Collections.Generic.List{System.String}@,System.Collections.Generic.List{System.String}@,System.Int32@)">
            <summary>
            Converts xml file into data table
            </summary>
            <param name="fileContent">Xml file content</param>
            <param name="csvRows">List of string csv rows</param>
            <param name="emptyRowWarnings">List of warnings</param>
            <param name="columnCount">Total column count</param>
            <returns></returns>
        </member>
        <member name="M:Eyedia.IDPE.Services.CSharpCodeToDataTable.Parse(System.String,System.Collections.Generic.List{System.String}@,System.Collections.Generic.List{System.String}@,System.Int32@)">
            <summary>
            Converts xml file into data table
            </summary>
            <param name="fileName">Input file name</param>
            <param name="csvRows">List of string csv rows</param>
            <param name="emptyRowWarnings">List of warnings</param>
            <param name="columnCount">Total column count</param>
            <returns></returns>
        </member>
        <member name="M:Eyedia.IDPE.Services.CSharpCodeToDataTable.Parse(System.Text.StringBuilder,Eyedia.IDPE.Services.CSharpCodeInformation)">
            <summary>
            Executes defined CSharp code and return DataTable
            </summary>
            <param name="fileContent">file content</param>
            <param name="csharpCodeInformation">Csharp code information, if not passed, will be taken from Datasource key</param>
            <returns></returns>
        </member>
        <member name="M:Eyedia.IDPE.Services.CSharpCodeToDataTable.Parse(System.String,Eyedia.IDPE.Services.CSharpCodeInformation)">
            <summary>
            Executes defined CSharp code and return DataTable
            </summary>
            <param name="fileName">file content</param>
            <param name="csharpCodeInformation">Csharp code information, if not passed, will be taken from Datasource key</param>
            <returns></returns>
        </member>
        <member name="T:Eyedia.IDPE.Services.XmlToDataTable">
            <summary>
            Converts Xml to DataTable
            </summary>
        </member>
        <member name="M:Eyedia.IDPE.Services.XmlToDataTable.#ctor">
            <summary>
            Instantiate XmlToDataTable with datasource in demo mode
            </summary>
        </member>
        <member name="M:Eyedia.IDPE.Services.XmlToDataTable.#ctor(Eyedia.IDPE.Services.Job)">
            <summary>
            Instantiate XmlToDataTable with datasource
            </summary>
            <param name="dataSource">The data source</param>        
        </member>
        <member name="M:Eyedia.IDPE.Services.XmlToDataTable.#ctor(Eyedia.IDPE.Services.DataSource)">
            <summary>
            Instantiate XmlToDataTable with datasource
            </summary>
            <param name="dataSource">The data source</param>        
        </member>
        <member name="M:Eyedia.IDPE.Services.XmlToDataTable.Parse(System.Collections.Generic.List{System.String}@,System.Collections.Generic.List{System.String}@,System.Int32@)">
            <summary>
            Converts xml file into data table
            </summary>        
            <param name="csvRows">List of string csv rows</param>
            <param name="emptyRowWarnings">List of warnings</param>
            <param name="columnCount">Total column count</param>        
            <returns></returns>
        </member>
        <member name="M:Eyedia.IDPE.Services.XmlToDataTable.Parse(System.String,System.String)">
            <summary>
            Transforms xml to delimited data based on Xslt. If Xslt not passed, data source xslt will be used
            </summary>        
            <param name="xslt">Optional xslt, if not passed then data source xslt will be used</param>
            <param name="xmlContent">xml content, generally called from tool just to test</param>
            <returns>Delimited data</returns>
        </member>
        <member name="M:Eyedia.IDPE.Services.OutputWriterCSharpCode.GetOutput">
            <summary>
            Executes CSharp code and returns string for output
            </summary>
            <returns></returns>
        </member>
        <member name="M:Eyedia.IDPE.Services.ColumnMap.#ctor(System.Int32,Eyedia.IDPE.DataManager.IdpeKey,System.Collections.Generic.List{Eyedia.IDPE.DataManager.IdpeKey},System.String,System.Int32)">
            <summary>
            Used for new mapping information
            </summary>
            <param name="dataSourceId"></param>
            <param name="connectionKey"></param>
            <param name="connectionKeys"></param>
            <param name="tableName"></param>
            <param name="totalRecordsInBatch"></param>
        </member>
        <member name="M:Eyedia.IDPE.Services.ColumnMap.#ctor(System.Int32,System.String)">
            <summary>
            Used for existing mapping information
            </summary>
            <param name="dataSourceId"></param>
            <param name="rawString"></param>
        </member>
        <member name="M:Eyedia.IDPE.Services.OutputWriterDelimited.GetOutput">
            <summary>
            Generates XML string based on pre-determined format
            </summary>
            <returns></returns>
        </member>
        <member name="T:Eyedia.IDPE.Services.OutputWriterErrored">
            <summary>
            this is obsolete, do not use
            </summary>
        </member>
        <member name="M:Eyedia.IDPE.Services.OutputWriterFixedLength.GetOutput">
            <summary>
            Generates XML string based on pre-determined format
            </summary>
            <returns></returns>
        </member>
        <member name="M:Eyedia.IDPE.Services.OutputWriterGeneric.GetOutput">
            <summary>
            Generates XML string based on pre-determined format
            </summary>
            <returns></returns>
        </member>
        <member name="M:Eyedia.IDPE.Services.PostMan.#ctor(Eyedia.IDPE.Services.Job,System.Boolean)">
            <summary>
            Postman sends emails in standard format(body, subject, attachment) unless explicitly passed
            </summary>
            <param name="job">The job object from where it takes information to construct body</param>
            <param name="error">If false then subject will not contain [Error] word</param>
        </member>
        <member name="M:Eyedia.IDPE.Services.PostMan.#ctor(Eyedia.IDPE.Services.DataSource,System.Boolean)">
            <summary>
            Postman sends emails in standard format(body, subject, attachment) unless explicitly passed
            </summary>
            <param name="dataSource">The DataSource object from where it takes information to construct body</param>
            <param name="error">If false then subject will not contain [Error] word</param>
        </member>
        <member name="T:Eyedia.IDPE.Services.EDIX12FileWatcher">
            <summary>
            A watcher, which internally turns a EDI X12 file into a Csv Or Flat
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.EDIX12FileWatcher.DataSource">
            <summary>
            The datasource which was instantiated based on data source id passed through constructor
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.EDIX12FileWatcher.FileName">
            The file name which was set through constructor
        </member>
        <member name="P:Eyedia.IDPE.Services.EDIX12FileWatcher.Xslt">
            <summary>
            The Xslt (extracted from data source keys)
            </summary>
        </member>
        <member name="T:Eyedia.IDPE.Services.SreFileSystemWatcher">
            <summary>
            SreFileSystemWatcher is used when datasource wants to watch a different folder for files instead of the IDPE global path
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.SreFileSystemWatcher.DataSourceId">
            <summary>
            Returns data source id for which the listener was set
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.SreFileSystemWatcher.Keys">
            <summary>
            Returns data source keys which was used to create the listener
            </summary>
        </member>
        <member name="M:Eyedia.IDPE.Services.SreFileSystemWatcher.#ctor(System.Int32,System.Collections.Generic.List{Eyedia.IDPE.DataManager.IdpeKey})">
            <summary>
            Initializes SreFileSystemWatcher with a file watcher to keep an eye on specific pull folder(taken from keys)
            </summary>
            <param name="dataSourceId">DataSource Id</param>
            <param name="keys">The keys of data source</param>
        </member>
        <member name="M:Eyedia.IDPE.Services.SreFileSystemWatcher.StartWatching">
            <summary>
            Starts watching the configured pull folder
            </summary>
        </member>
        <member name="T:Eyedia.IDPE.Services.PusherDosCommands">
            <summary>
            Executes DOS commands
            </summary>
        </member>
        <member name="M:Eyedia.IDPE.Services.PusherDosCommands.#ctor">
            <summary>
            Initializes PusherDosCommands object
            </summary>
        </member>
        <member name="M:Eyedia.IDPE.Services.PusherDosCommands.FileProcessed(Eyedia.IDPE.Services.PullersEventArgs)">
            <summary>
            Executes DOS commands
            </summary>
            <param name="e">PullersEventArgs</param>
        </member>
        <member name="T:Eyedia.IDPE.Services.PusherFtp">
            <summary>
            FTP type pusher - uploads file into FTP when processed
            </summary>
        </member>
        <member name="M:Eyedia.IDPE.Services.PusherFtp.#ctor">
            <summary>
            Default instance of PusherFtp 
            </summary>
        </member>
        <member name="M:Eyedia.IDPE.Services.PusherFtp.FileProcessed(Eyedia.IDPE.Services.PullersEventArgs)">
            <summary>
            Uploads processed file into FTP
            </summary>
            <param name="e">PullerEventArgs</param>
        </member>
        <member name="T:Eyedia.IDPE.Services.PusherSqlQuery">
            <summary>
            Sql Query type pusher - executes sql query when file processed
            </summary>
        </member>
        <member name="M:Eyedia.IDPE.Services.PusherSqlQuery.#ctor">
            <summary>
            Default instance of PusherSqlQuery 
            </summary>
        </member>
        <member name="M:Eyedia.IDPE.Services.PusherSqlQuery.FileProcessed(Eyedia.IDPE.Services.PullersEventArgs)">
            <summary>
            Executes SQL query
            </summary>
            <param name="e">PullerEventArgs</param>
        </member>
        <member name="T:Eyedia.IDPE.Services.Utility">
            <summary>
            Various c# calls which are not possible directly on xaml
            </summary>
        </member>
        <member name="M:Eyedia.IDPE.Services.Utility.AddEntry(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.Object)">
            <summary>
            Adds entry to a dictionary, need to be modified to support generic type
            </summary>
            <param name="dict"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Eyedia.IDPE.Services.DuplicateCheck.CheckDuplicate(Eyedia.IDPE.Services.Job,System.Data.DataTable,Eyedia.IDPE.DataManager.IdpeKey)">
            <summary>
            returns true if duplicate check failed
            </summary>
            <param name="job"></param>
            <param name="filterTable"></param>
            <param name="connectionStringKey"></param>
            <returns></returns>
        </member>
        <member name="T:Eyedia.IDPE.Services.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.Properties.Resources.DefineButtonContent">
            <summary>
              Looks up a localized string similar to Define ....
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.Properties.Resources.DynamicArgumentDialogTitle">
            <summary>
              Looks up a localized string similar to Child Arguments.
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.Properties.Resources.ElipsesButtonContent">
            <summary>
              Looks up a localized string similar to ....
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.Properties.Resources.EnvironmentVariableNotDefinedErrorText">
            <summary>
              Looks up a localized string similar to Environment variable &quot;{0}&quot; not defined.
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.Properties.Resources.FailedToLoadWorkflowValidationErrorText">
            <summary>
              Looks up a localized string similar to Failed to load workflow, {0}.
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.Properties.Resources.InvalidIArgumentTypeValidationErrorText">
            <summary>
              Looks up a localized string similar to {0} must have an argument type of {1}.
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.Properties.Resources.InvalidIArgumentValidationErrorText">
            <summary>
              Looks up a localized string similar to {0} is not an argument of loaded dynamic activity.
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.Properties.Resources.InvalidInArgumentDirectionValidationErrorText">
            <summary>
              Looks up a localized string similar to {0} must have an In argument direction.
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.Properties.Resources.InvalidInOutArgumentDirectionValidationErrorText">
            <summary>
              Looks up a localized string similar to {0} must have an InOut argument direction.
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.Properties.Resources.InvalidOutArgumentDirectionValidationErrorText">
            <summary>
              Looks up a localized string similar to {0} must have an Out argument direction.
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.Properties.Resources.SpecifyValidWorkflowValidationErrorText">
            <summary>
              Looks up a localized string similar to Specify valid workflow.
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.Properties.Resources.UndefinedPathErrorText">
            <summary>
              Looks up a localized string similar to Undefined.
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.Properties.Resources.WorkflowArgumentsTextBlockText">
            <summary>
              Looks up a localized string similar to Workflow Arguments.
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.Properties.Resources.WorkflowFileTextBlockText">
            <summary>
              Looks up a localized string similar to Workflow File.
            </summary>
        </member>
        <member name="M:Eyedia.IDPE.Services.AnyToDataTable.Feed``1(System.Collections.Generic.IList{``0},System.String)">
             <summary>
             Converts list objects to data table and feeds to DataTable 'InputData' of underlying Job object
             </summary>
             <param name="inputData">List of objects</param>
            <param name="overridenMapping">Comma separated additional mapping override information. For example if "EmpId" from object to be mapped with "EmployeeId" of attribute, then "EmpId=EmployeeId,Ename=EmployeeName"</param>
        </member>
        <member name="M:Eyedia.IDPE.Services.WebTaskHost.DoWork(System.Action)">
            <summary>
            
            </summary>
            <param name="action"></param>
            <returns>false if the caller should shut down the work</returns>
        </member>
        <member name="P:Eyedia.IDPE.Services.Build.ImageRuntimeVersion">
            <summary>
            Gets a string representing the version of the CLR saved in 
            the file containing the manifest. Under 1.0, this returns
            the hard-wired string "v1.0.3705".
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.Build.DLLVersions">
            <summary>
            This is the status or milestone of the build. Examples are
            M1, M2, ..., Mn, BETA1, BETA2, RC1, RC2, RTM.
            </summary>
        </member>
        <member name="M:Eyedia.IDPE.Services.AttributeParser.Parse(System.Collections.Generic.List{Eyedia.IDPE.DataManager.IdpeAttribute},Eyedia.IDPE.Services.Column,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Parses attributes
            </summary>
            <param name="attributes">Master attribute list</param>
            <param name="column">A column(Attributes) to be parsed</param>
            <param name="isSystemRow">true if processing system row</param>
            <param name="rowPosition">Row position, used only in error information, to identify row. 0(Zero) in case of system attributes.</param>
            <param name="doNotWriteErrorInTraceFile">To avoid confusion, if this is true, it wont write sql query formatting errors into trace file.
            (in case of first attempt, values may not be ready to replace in queries, which is absolutely a valid scenario)</param>
        </member>
        <member name="M:Eyedia.IDPE.Services.Idpe.#cctor">
            <summary>
            This is mainly to handle instantiation of custom trace listner (if possible). Incorrect file path or permission issue may fail
            instantiating a custom trace listner if instantiated from web.config.system.diagonstic settings. Most of the methods will throw error
            as they have Trace statements in it, and no operation will be performed. This place is to intialize trace listner silently, 
            else eat the exception and keep quite.
            </summary>
        </member>
        <member name="M:Eyedia.IDPE.Services.Idpe.StartPullers">
            <summary>
            This method initializes all 'pull' type applications
            </summary>
            <returns></returns>
        </member>
        <member name="M:Eyedia.IDPE.Services.Idpe.StopPullers">
            <summary>
            This method stops all 'pull' type applications
            </summary>
            <returns></returns>
        </member>
        <member name="M:Eyedia.IDPE.Services.Idpe.GetPullersStatus">
            <summary>
            Gets Pullers status
            </summary>
            <returns></returns>
        </member>
        <member name="M:Eyedia.IDPE.Services.Idpe.ProcessJob(System.Int32,System.String,System.String,System.String)">
            <summary>
            This method is used when 'Caller' wants to parse complete file at a time.
            </summary>
            <param name="dataSourceId">Data source id (either id or name is needed)</param>
            <param name="dataSourceName">Data source name (either id or name is needed)</param>
            <param name="processingBy">user name who is processing, we could get this from context, but for scenario like 'a126042, Deb'jyoti Das', let caller decide the user name.</param>
            <param name="inputData">File content.</param>
            <returns>Output xml. for details, read documentation.</returns>
        </member>
        <member name="M:Eyedia.IDPE.Services.Idpe.ProcessObjects(System.Int32,System.String,System.String,System.Collections.Generic.List{System.Object},System.String)">
             <summary>
             This method is used when 'Caller' wants to parse complete file at a time.
             </summary>
             <param name="dataSourceId">Data source id (either id or name is needed)</param>
             <param name="dataSourceName">Data source name (either id or name is needed)</param>      
             <param name="processingBy">user name who is processing, we could get this from context, but for scenario like 'a126042, Deb'jyoti Das', let caller decide the user name.</param>
            <param name="inputData">List of custom objects</param>
            <param name="overridenMapping">Comma separated additional mapping override information. For example if "EmpId" from object to be mapped with "EmployeeId" of attribute, then "EmpId=EmployeeId,Ename=EmployeeName"</param>
             <returns>Output object. for details, read documentation.</returns>
        </member>
        <member name="M:Eyedia.IDPE.Services.Idpe.ProcessXml(System.String,System.String)">
            <summary>
            This method is used when 'Caller' wants to parse complete file at a time.
            </summary>        
            <param name="xmlInput">Input data in xml format.</param>        
            <param name="processingBy">user name who is processing, we could get this from context, but for scenario like 'a126042, Deb'jyoti Das', let caller decide the user name.</param>
            <returns>Output xml. for details, read documentation.</returns>
        </member>
        <member name="M:Eyedia.IDPE.Services.DataParser.#ctor">
            <summary>
            Creates new data parser object in demo mode
            </summary>
        </member>
        <member name="M:Eyedia.IDPE.Services.DataParser.#ctor(Eyedia.IDPE.Services.Job)">
            <summary>
            Creates new data parser object within IDPE context
            </summary>
            <param name="job"></param>
        </member>
        <member name="M:Eyedia.IDPE.Services.DataParser.#ctor(Eyedia.IDPE.Services.DataSource)">
            <summary>
            Creates new data parser object within IDPE context
            </summary>
            <param name="dataSource"></param>
        </member>
        <member name="P:Eyedia.IDPE.Services.DataParser.Job">
            <summary>
            The job object
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.DataParser.DataSource">
            <summary>
            The data source object
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.DataParser.TempFolder">
            <summary>
            Temp folder for each data source
            </summary>
        </member>
        <member name="T:Eyedia.IDPE.Services.InputFileGenerator">
            <summary>
            Generates input file content or actual data as System.Data.DataTable.
            </summary>
        </member>
        <member name="M:Eyedia.IDPE.Services.InputFileGenerator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Eyedia.IDPE.Services.InputFileGenerator.#ctor(Eyedia.IDPE.Services.Watchers)">
            <summary>
            When implemented by a 'PullSQL' type data source, this is the recommended constructor
            </summary>
            <param name="sqlWatcher">The SQL watcher will be passed from IDPE context</param>
        </member>
        <member name="M:Eyedia.IDPE.Services.InputFileGenerator.#ctor(Eyedia.IDPE.Services.DataSource)">
            <summary>
            When implemented for scheduler type
            </summary>
            <param name="dataSource">The data source will be passed from IDPE context</param>
        </member>
        <member name="M:Eyedia.IDPE.Services.InputFileGenerator.#ctor(Eyedia.IDPE.Services.WorkerData)">
            <summary>
            When implemented by 'Non-PullSQL' type data source, this is the recommended constructor
            </summary>
            <param name="data">The data will be passed from IDPE context</param>
        </member>
        <member name="M:Eyedia.IDPE.Services.InputFileGenerator.#ctor(Eyedia.IDPE.Services.Job)">
            <summary>
            Most commonly used constructor
            </summary>
            <param name="job">The job will be passed from IDPE context</param>
        </member>
        <member name="P:Eyedia.IDPE.Services.InputFileGenerator.SqlWatcher">
            <summary>
            The SqlWatcher, If appropriate constructor is used, else null
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.InputFileGenerator.Data">
            <summary>
            The Data, If appropriate constructor is used, else null
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.InputFileGenerator.DataSource">
            <summary>
            The Data dource, If appropriate constructor is used, else null
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.InputFileGenerator.Job">
            <summary>
            The Job, If appropriate constructor is used, else null
            </summary>
        </member>
        <member name="M:Eyedia.IDPE.Services.InputFileGenerator.GenerateFileContent(System.Data.DataTable)">
            <summary>
            Generate input file content from the SQL output(the 'data')
            </summary>
            <param name="data">SQL output will be loaded into this data table</param>
            <exception cref="T:System.NotImplementedException">If actual code is implemented in other GenerateFileContent(string or StringBuilder), then throw NotImplementedException from this.</exception>
            <returns>Input file content as StringBuilder</returns>
        </member>
        <member name="M:Eyedia.IDPE.Services.InputFileGenerator.GenerateFileContent(System.String)">
            <summary>
            Generate input data from any file
            </summary>
            <param name="fileName">File name</param>
            <exception cref="T:System.NotImplementedException">If actual code is implemented in other GenerateFileContent(DataTable or StringBuilder), then throw NotImplementedException from this.</exception>
            <returns>Actual data as DataTable</returns>
        </member>
        <member name="M:Eyedia.IDPE.Services.InputFileGenerator.GenerateFileContent(System.Text.StringBuilder)">
            <summary>
            Generate input data from file content of any readable file(.txt|.csv|.dat|etc)
            </summary>
            <param name="fileContent">File content</param>
            <exception cref="T:System.NotImplementedException">If actual code is implemented in other GenerateFileContent(DataTable or string), then throw NotImplementedException from this.</exception>
            <returns>Actual data as DataTable</returns>
        </member>
        <member name="M:Eyedia.IDPE.Services.JobProcessor.InitializeJob(System.Int32,System.String,System.String)">
            <summary>
            Start called when 'Caller' wants to parse one row at a time. Initiate a new job based on input parameters.
            Either applicationId should contain a valid application id or applicationName should be a valid application name.
            </summary>
            <param name="dataSourceId">Should be a valid application id. If this is filled, then applicationName is optional.</param>
            <param name="dataSourceName">Should be a valid application name. If this is filled, then applicationId is optional.</param>
            <param name="processingBy">user name who is processing, we could get this from context, but for scenario like 'a126042, Deb'jyoti Das', let caller decide the user name.</param>
            <returns>Retruns process identifier as GUID or string.empty (fail condition)</returns>
        </member>
        <member name="M:Eyedia.IDPE.Services.JobProcessor.GetJobResult(System.String)">
            <summary>
            Finish to be called when 'Caller' finished parsing row by row, and wants to get the result.
            </summary>
            <param name="jobId">Process identifier</param>
            <returns>Output xml. for details, read documentation.</returns>
        </member>
        <member name="M:Eyedia.IDPE.Services.JobProcessor.ProcessXml(System.String,System.String)">
            <summary>
            This method is used when 'Caller' wants to parse complete file at a time.
            </summary>        
            <param name="xmlInput">Input data in xml format.</param>        
            <param name="processingBy">user name who is processing, we could get this from context, but for scenario like 'a126042, Deb'jyoti Das', let caller decide the user name.</param>
            <returns>Output xml. for details, read documentation.</returns>
        </member>
        <member name="M:Eyedia.IDPE.Services.JobProcessor.ProcessJob(System.Int32,System.String,System.String)">
            <summary>
            This method is used when 'Caller' wants to parse complete file at a time.
            </summary>
            <param name="dataSourceId">Id of the data source (either id or name required)</param>        
            <param name="dataSourceName">Name of the data source (either id or name required)</param>   
            <param name="processingBy">user name who is processing, we could get this from context, but for scenario like &apos;a126042, Deb'jyoti Das&apos;, let caller decide the user name.</param>        
            <returns>Output xml. for details, read documentation.</returns>
        </member>
        <member name="M:Eyedia.IDPE.Services.JobProcessor.ProcessJob(System.String,System.String,System.Collections.Generic.List{System.Object},System.String)">
             <summary>
             This method is used when 'Caller' wants to parse complete file at a time.
             </summary>
             <param name="jobId">JobId which you got after initializing a job</param>        
             <param name="processingBy">user name who is processing, we could get this from context, but for scenario like &apos;a126042, Deb'jyoti Das&apos;, let caller decide the user name.</param>
             <param name="inputData">List of custom objects</param>        
            <param name="overridenMapping">Comma separated additional mapping override information. For example if "EmpId" from object to be mapped with "EmployeeId" of attribute, then "EmpId=EmployeeId,Ename=EmployeeName"</param>
             <returns>Output object. for details, read documentation.</returns>
        </member>
        <member name="M:Eyedia.IDPE.Services.JobProcessor.ProcessJob(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initialize a new job if jobId is NULL, feed CSV/FixedLength data into worker &amp; executes worker
            </summary>        
            <param name="dataSourceId">Should be a valid application id. If this is filled, then datasource name is optional.</param>
            <param name="dataSourceName">Should be a valid datasource name. If this is filled, then datasource id is optional.</param>        
            <param name="processingBy">user name who is processing, we could get this from context, but for scenario like &apos;a126042, Deb'jyoti Das&apos;, let caller decide the user name.</param>
            <param name="fileName">fileName is used for just reference</param>        
            <param name="jobId">When initial request comes from WCF, we already have jobId, else string.Empty</param>
            <param name="withError">Error message if you want to execute a dummy execution just to pass the error message to caller</param>
            <param name="withWarning">Warning message if you want to execute a dummy execution just to pass the error message to caller</param>
            <returns>Output StringBuilder. for details, read documentation.</returns>
        </member>
        <member name="M:Eyedia.IDPE.Services.JobProcessor.ProcessJob(Eyedia.IDPE.Services.Job)">
            <summary>
            Process a job already created from data table
            </summary>          
            <param name="job">The job instance</param>
            <returns></returns>
        </member>
        <member name="M:Eyedia.IDPE.Services.JobProcessor.ProcessSpreadSheet(System.Int32,System.String,System.String,System.String)">
            <summary>
            Initialize a new job, feed MS Excel format data into worker &amp; executes worker
            </summary>        
            <param name="dataSourceId">Should be a valid application id. If this is filled, then applicationName is optional.</param>
            <param name="dataSourceName">Should be a valid application name. If this is filled, then applicationId is optional.</param>        
            <param name="processingBy">user name who is processing, we could get this from context, but for scenario like &apos;a126042, Deb'jyoti Das&apos;, let caller decide the user name.</param>
            <param name="excelFileName">Excel file name is used for just reference</param>        
            <returns>Output xml. for details, read documentation.</returns>
        </member>
        <member name="M:Eyedia.IDPE.Services.JobProcessor.Instantiate(System.Int32,System.String,System.String)">
            <summary>
            Process a new job from data table
            </summary>        
            <param name="dataSourceId">Should be a valid application id. If this is filled, then datasource name is optional.</param>
            <param name="dataSourceName">Should be a valid datasource name. If this is filled, then datasource id is optional.</param>        
            <param name="processingBy">user name who is processing, we could get this from context, but for scenario like &apos;a126042, Deb'jyoti Das&apos;, let caller decide the user name.</param>      
            <returns></returns>
        </member>
        <member name="T:Eyedia.IDPE.Services.ManifestResourceHandler">
            <summary>
            Reads a resource from the assembly manifest and returns its contents
            as the response entity.
            </summary>
        </member>
        <member name="T:Eyedia.IDPE.Services.PerformanceCounter">
            <summary>
            Counts perfromance based on unique process name. Enable this by setting 'PerformanceCounter' to 'true' in config file
            </summary>
        </member>
        <member name="M:Eyedia.IDPE.Services.SqlWatcher.#ctor(Eyedia.IDPE.DataManager.IdpeDataSource)">
            <summary>
            Keeps pulling from database (MS SQL, MS SQL CE, Oracle)
            </summary>
            <param name="dataSource">The data source object</param>       
        </member>
        <member name="T:Eyedia.IDPE.Services.ZipFileWatcher">
            <summary>
            Handles zip/rar file. Internal method 'Handle(int,string,string)' will get called once a file is found. 
            Data source owners to implement Handle(int,string)
            </summary>
        </member>
        <member name="M:Eyedia.IDPE.Services.ZipFileWatcher.#ctor(System.String,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            This constructor get called internally by IDPE
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.ZipFileWatcher.DataSourceId">
            <summary>
            The data source, under which the file has been received
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.ZipFileWatcher.ProcessingBy">
            <summary>
            Processing by
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.ZipFileWatcher.ZipFileName">
            <summary>
            The name of the zip file provided through the constructor
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.ZipFileWatcher.UnZippedFileNames">
            <summary>
            List of all unzipped files found within the zip file
            </summary>
        </member>
        <member name="M:Eyedia.IDPE.Services.ZipFileWatcher.Prepare(System.String@)">
            <summary>
            This method gets called after unzipping files.
            Can be useful to validate the zip file, (sort)group unzipped files for sequential process
            </summary>
            <param name="errorMessage">override default error message</param>
            <returns>'false' to abort processing file</returns>
        </member>
        <member name="M:Eyedia.IDPE.Services.ZipFileWatcher.Handle(System.String,System.String,System.String,Eyedia.IDPE.Common.FileStatus)">
            <summary>
            This method will get called for each file found within the zip file.
            </summary>        
            <param name="unzippedFileName">Un zipped full file name</param>
            <param name="onlyFileName">Un zipped file name</param>
            <param name="extension">file extension</param>
            <param name="fileStatus">file status</param>
        </member>
        <member name="T:Eyedia.IDPE.Services.BasePage">
            <summary>
            Provides the base implementation and layout for most pages that render 
            HTML for the error log.
            </summary>
        </member>
        <member name="T:Eyedia.IDPE.Services.LogArchivePage">
            <summary>
            Renders an HTML page that presents information about the version,
            build configuration, source files as well as a method to check
            for updates.
            </summary>
        </member>
        <member name="T:Eyedia.IDPE.Services.MonitorPage">
            <summary>
            Renders an HTML page that presents information about the version,
            build configuration, source files as well as a method to check
            for updates.
            </summary>
        </member>
        <member name="T:Eyedia.IDPE.Services.PageFactory">
            <summary>
            HTTP handler factory that dispenses handlers for rendering views and 
            resources needed to display the error log.
            </summary>
        </member>
        <member name="M:Eyedia.IDPE.Services.PageFactory.GetHandler(System.Web.HttpContext,System.String,System.String,System.String)">
            <summary>
            Returns an object that implements the <see cref="T:System.Web.IHttpHandler"/> 
            interface and which is responsible for serving the request.
            </summary>
            <returns>
            A new <see cref="T:System.Web.IHttpHandler"/> object that processes the request.
            </returns>
        </member>
        <member name="M:Eyedia.IDPE.Services.PageFactory.ReleaseHandler(System.Web.IHttpHandler)">
            <summary>
            Enables the factory to reuse an existing handler instance.
            </summary>
        </member>
        <member name="M:Eyedia.IDPE.Services.PageFactory.IsAuthorized(System.Web.HttpContext)">
            <summary>
            Determines if the request is authorized by objects implementing
            <see cref="T:Eyedia.IDPE.Services.IRequestAuthorizationHandler" />.
            </summary>
            <returns>
            Returns zero if unauthorized, a value greater than zero if 
            authorized otherwise a value less than zero if no handlers
            were available to answer.
            </returns>
        </member>
        <member name="T:Eyedia.IDPE.Services.LocalFileSystemWatcher">
            <summary>
            Local file watcher
            </summary>
        </member>
        <member name="M:Eyedia.IDPE.Services.LocalFileSystemWatcher.#ctor(System.String)">
            <summary>
            Initializes a local file watcher with a archive path and standard (or global) watch path
            </summary>
            <param name="archivePath"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Eyedia.IDPE.Services.LocalFileSystemWatcher.#ctor(System.String,System.String)" -->
        <member name="M:Eyedia.IDPE.Services.LocalFileSystemWatcher.Run">
            <summary>
            Starts the local file watcher
            </summary>
        </member>
        <member name="M:Eyedia.IDPE.Services.LocalFileSystemWatcher.Stop">
            <summary>
            Stops local file watcher events to be fired
            </summary>
        </member>
        <member name="M:Eyedia.IDPE.Services.LocalFileSystemWatcher.Process(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Processes a file by (1) moving file to archive folder, and then (2) invoking FileDownloaded event
            </summary>
            <param name="fileFullName"></param>
            <param name="fileName"></param>
            <param name="dataSourceId"></param>
            <param name="handleArchive"></param>
        </member>
        <member name="M:Eyedia.IDPE.Services.LocalFileSystemWatcher.Dispose">
            <summary>
            Dispose this object (this will never be called as long as IDPE instance is active)
            </summary>
        </member>
        <member name="T:Eyedia.IDPE.Services.Pushers">
            <summary>
            Pushers used to push output to another destination. Just override 'FileProcessed' method.
            In case of redirected output, this can be used to copy data back to original output folder.
            </summary>
        </member>
        <member name="M:Eyedia.IDPE.Services.Pushers.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Eyedia.IDPE.Services.Pushers.Start">
            <summary>
            Depreciated. Do not use.
            </summary>
        </member>
        <member name="M:Eyedia.IDPE.Services.Pushers.FileProcessed(Eyedia.IDPE.Services.PullersEventArgs)">
            <summary>
            This method will get called once a file has been processed. Override this method to push output to your desired destination.
            The base method deletes the file.
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Eyedia.IDPE.Services.MyPusher">
            <summary>
            Sample class for testing. Do not use.
            </summary>
        </member>
        <member name="M:Eyedia.IDPE.Services.MyPusher.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Eyedia.IDPE.Services.MyPusher.FileProcessed(Eyedia.IDPE.Services.PullersEventArgs)">
            <summary>
            Overridden method to send output to desired destination. Just for testing, do not use.
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Eyedia.IDPE.Services.Registry">
            <summary>
            Maintains job registry, expires job by removing it from memory. Job expire duration can be set in 'MemoryReset' in config
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.Registry.CachedTables">
            <summary>
            Common dictionary to store any object during the process
            </summary>
        </member>
        <member name="T:Eyedia.IDPE.Services.WorkerData">
            <summary>
            WorkerData stores information(job slice) of a worker
            A job instance used by Worker
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.WorkerData.SlicePosition">
            <summary>
            Index of splitted data tables
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.WorkerData.RowPosition">
            <summary>
            Current row position, while processing
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.WorkerData.Errors">
            <summary>
            Any errors during the process. This gets accumulated into job.Errors
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.WorkerData.Rows">
            <summary>
            One Row = List of attributes. This one returns all the rows of current process
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.WorkerData.CurrentRow">
            <summary>
            returns current row based on RowPosition
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.WorkerData.BadDataInCsvFormat">
            <summary>
            Returns bad data in csv file format
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.WorkerData.Warnings">
            <summary>
            Stores all warnnings
            </summary>
        </member>
        <member name="M:Eyedia.IDPE.Services.WorkerData.ColumnValue(System.String)">
            <summary>
            Returns column value from Columns from the particular row (based on RowPosition)
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="P:Eyedia.IDPE.Services.WorkerData.ProcessVariable">
            <summary>
            Process variable is a dictionary which can be used to store values for one process
            Useful when u want to store something while executing rules.
            </summary>
        </member>
        <member name="P:Eyedia.IDPE.Services.WorkerData.ValueUpdationNotPermitted">
            <summary>
            Only IsValid is a permissible attribute after PostParse, no other attribute value can not be updated        
            </summary>
        </member>
        <member name="M:Eyedia.IDPE.Services.Worker.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:Eyedia.IDPE.Services.WorkerManager.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Eyedia.IDPE.Clients.ClientConfigExtracter">
            <summary>
            Extracts Sre client config(pre-generated) from this assembly
            </summary>
        </member>
        <member name="M:Eyedia.IDPE.Clients.ClientConfigExtracter.ExtractConfig(System.String)">
            <summary>
            Extracts Sre client config(pre-generated) from this assembly
            </summary>
            <param name="fileName">The config file name to be generated</param>
        </member>
    </members>
</doc>
